#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('AppTraceAPI:server');
const http = require('http');

const cluster = require('cluster');
const numCPUs = require('os').cpus().length;
var apmConfig = require('../config/config', 'dont-enclose'),
    plugins = require('../plugins/pluginManager.js'),
    jobs = require('../api/parts/jobs'),
    os = require('os'),
    workers = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
/**
 * Create HTTP server.
 */

try {
    require('fs').mkdirSync('./log');
} catch (e) {
    if (e.code != 'EEXIST') {
        console.error("Could not set up log directory, error was: ", e);
        process.exit(1);
    }
}

var log4js = require('log4js');

log4js.configure('./config/log4js.json');


if (cluster.isMaster) {

    var workerCount = (apmConfig.api.workers)? apmConfig.api.workers : os.cpus().length;

    for (var i = 0; i < workerCount; i++) {
        var worker = cluster.fork();
        workers.push(worker);
    }

    var passToMaster = function(worker){
        worker.on('message', function(msg){
            if (msg.cmd === 'log') {
                // console.log(new Date().toISOString() + ': INFO\t[logs]\tLogging configuration changed: %j', msg.config);
                workers.forEach(function(w){
                    if (w !== worker) { w.send({cmd: 'log', config: msg.config}); }
                });
                require('./utils/log.js').ipcHandler(msg);
            }
            else if(msg.cmd === "checkPlugins"){
                plugins.checkPluginsMaster();
            }
            else if(msg.cmd === "startPlugins"){
                plugins.startSyncing();
            }
            else if(msg.cmd === "endPlugins"){
                plugins.stopSyncing();
            }
        });
    };

    workers.forEach(passToMaster);

    cluster.on('exit', function(worker) {
        workers = workers.filter(function(w){
            return w !== worker;
        });
        var newWorker = cluster.fork();
        workers.push(newWorker);
        passToMaster(newWorker)
    });

    plugins.dispatch("/master", {});

    // Allow configs to load & scanner to find all jobs classes

    setTimeout(() => {
        jobs.job('api:ping').replace().schedule('every 1 day');
        jobs.job('api:clear').replace().schedule('every 1 day');
    }, 3000);

   /* // Fork workers.
    for (var i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('exit', (worker, code, signal) => {
        console.log(`worker ${worker.process.pid} died`);
    });*/

} else {

    var common = require('../api/utils/common.js');

    process.on('message', common.log.ipcHandler);


    plugins.dispatch("/worker", {common:common});
    // Workers can share any TCP connection
    // In this case it is an HTTP server
    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */


//var log = log4js.getLogger("startup");

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */


    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}


